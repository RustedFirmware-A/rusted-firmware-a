
# cargo-vet audits file

[criteria.does-not-implement-crypto]
description = """
Inspection reveals that the crate in question does not attempt to implement any
cryptographic algorithms on its own.

Note that certification of this does not require an expert on all forms of
cryptography: it's expected for crates we import to be \"good enough\" citizens,
so they'll at least be forthcoming if they try to implement something
cryptographic. When in doubt, please ask an expert."""

[criteria.ub-risk-0]
description = """
No unsafe code.

Full description of the audit criteria can be found at
https://github.com/google/rust-crate-audits/blob/main/auditing_standards.md#ub-risk-0
"""
implies = "ub-risk-1"

[criteria.ub-risk-1]
description = """
Excellent soundness.

Full description of the audit criteria can be found at
https://github.com/google/rust-crate-audits/blob/main/auditing_standards.md#ub-risk-1
"""
implies = "ub-risk-2"

[criteria.ub-risk-1-thorough]
description = """
Excellent soundness (established in a thorough review).

Full description of the audit criteria can be found at
https://github.com/google/rust-crate-audits/blob/main/auditing_standards.md#ub-risk-1-thorough
"""
implies = "ub-risk-1"
aggregated-from = "https://chromium.googlesource.com/chromiumos/third_party/rust_crates/+/refs/heads/main/cargo-vet/audits.toml?format=TEXT"

[criteria.ub-risk-2]
description = """
Negligible unsoundness or average soundness.

Full description of the audit criteria can be found at
https://github.com/google/rust-crate-audits/blob/main/auditing_standards.md#ub-risk-2
"""
implies = "ub-risk-3"
aggregated-from = "https://chromium.googlesource.com/chromiumos/third_party/rust_crates/+/refs/heads/main/cargo-vet/audits.toml?format=TEXT"

[criteria.ub-risk-2-thorough]
description = """
Negligible unsoundness or average soundness (established in a thorough review).

Full description of the audit criteria can be found at
https://github.com/google/rust-crate-audits/blob/main/auditing_standards.md#ub-risk-2-thorough
"""
implies = "ub-risk-2"
aggregated-from = "https://chromium.googlesource.com/chromiumos/third_party/rust_crates/+/refs/heads/main/cargo-vet/audits.toml?format=TEXT"

[criteria.ub-risk-3]
description = """
Mild unsoundness or suboptimal soundness.

Full description of the audit criteria can be found at
https://github.com/google/rust-crate-audits/blob/main/auditing_standards.md#ub-risk-3
"""
implies = "ub-risk-4"
aggregated-from = "https://chromium.googlesource.com/chromiumos/third_party/rust_crates/+/refs/heads/main/cargo-vet/audits.toml?format=TEXT"

[criteria.ub-risk-4]
description = """
Extreme unsoundness.

Full description of the audit criteria can be found at
https://github.com/google/rust-crate-audits/blob/main/auditing_standards.md#ub-risk-4
"""
aggregated-from = "https://chromium.googlesource.com/chromiumos/third_party/rust_crates/+/refs/heads/main/cargo-vet/audits.toml?format=TEXT"

[[audits.aarch64-paging]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-2"]
version = "0.8.0"

[[audits.num_enum]]
who = "Chris Palmer <palmer@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-2"]
version = "0.7.3"
notes = """
safe-to-deploy: Given the UB risk in `num_enum_derive`, `num_enum` callers
should prefer `FromPrimitive` to `UnsafeFromPrimitive`.
"""

[[audits.num_enum_derive]]
who = "Chris Palmer <palmer@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-2"]
version = "0.7.3"
notes = """
ub-risk-2: unsafe in asserts, tests, and doc tests. `unchecked_transmute_from`:
unexplained use of `transmute`; caller is required to check that \"`number` must
represent a valid discriminant of `Self`.\"
"""

[[audits.percore]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-2"]
version = "0.1.0"

[[audits.safe-mmio]]
who = "Chris Palmer <palmer@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-2-thorough"]
version = "0.1.0"
notes = """
No crypto.

Safe to run: No filesystem access, process creation, et c.

Safe to deploy: Does not interact with untrustworthy data.

UB: Small amount of `unsafe`, with well-documented safety requirements for
callers. This crate probably can't be ub-risk-1 because it can't statically or
feasibly dynamically check its callers; therefore callers are on their own to
meet the (clear, straightforward) safety contract.
"""

[[audits.spin]]
who = "Chris Palmer <palmer@google.com>"
criteria = ["safe-to-deploy", "ub-risk-2"]
version = "0.9.8"
notes = """
Safe to deploy: Does not interact with untrustworthy input.

UB risk: A fair amount of `unsafe`, but it is all either well explained with
SAFETY comments that rely on e.g. statically checked assertions such as
exclusive access due to `&mut` (proven by `rustc`), exclusive access due to
access inside `*Guard`s, and `debug_assert`s that check the safety
preconditions. Other uses of `unsafe` are in tests, such as to mutate a `static
mut`.
"""

[[audits.syn]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = ["safe-to-deploy", "ub-risk-2"]
version = "2.0.87"
notes = "Extensive unsafe code in buffer.rs is probably fine, but not very well documented. Unsafe APIs aren't exposed at least."

[[audits.thiserror]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-0"]
version = "2.0.3"

[[audits.thiserror]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-0"]
delta = "2.0.3 -> 2.0.12"

[[audits.thiserror-impl]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-0"]
version = "2.0.3"

[[audits.thiserror-impl]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-0"]
delta = "2.0.3 -> 2.0.12"

[[audits.uuid]]
who = "Chris Palmer <palmer@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-2"]
version = "1.15.1"
notes = """
does-not-implement-crypto: Calls into `sha1_smol` to use it in a straightforward
and correct way. Uses `md5` similarly. (Although cryptographically obsolete,
particular UUID specification versions require these functions.) Uses
`getrandom` (default) or `rand` (configurable) for its RNG.

ub-risk-2: `unsafe` blocks are either well-explained with safety comments;
invocations of C functions with valid arguments (e.g. `CoCreateGuid` on
Windows), and casts from and to pointers to objects that are all newtype
wrappers of the same underlying type and hence have the same layout.
`new_unchecked` returns a `NonNilUuid` without checking it, creating the
(declared) possibility of UB.

safe-to-deploy: Limited input language. `parse_str` and callees do not use
`unsafe`. UB seems restricted to caller error (as mentioned above for
ub-risk-2).
"""
