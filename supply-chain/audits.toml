
# cargo-vet audits file

[criteria.does-not-implement-crypto]
description = """
Inspection reveals that the crate in question does not attempt to implement any
cryptographic algorithms on its own.

Note that certification of this does not require an expert on all forms of
cryptography: it's expected for crates we import to be \"good enough\" citizens,
so they'll at least be forthcoming if they try to implement something
cryptographic. When in doubt, please ask an expert."""

[criteria.ub-risk-0]
description = """
No unsafe code.

Full description of the audit criteria can be found at
https://github.com/google/rust-crate-audits/blob/main/auditing_standards.md#ub-risk-0
"""
implies = "ub-risk-1"

[criteria.ub-risk-1]
description = """
Excellent soundness.

Full description of the audit criteria can be found at
https://github.com/google/rust-crate-audits/blob/main/auditing_standards.md#ub-risk-1
"""
implies = "ub-risk-2"

[criteria.ub-risk-1-thorough]
description = """
Excellent soundness (established in a thorough review).

Full description of the audit criteria can be found at
https://github.com/google/rust-crate-audits/blob/main/auditing_standards.md#ub-risk-1-thorough
"""
implies = "ub-risk-1"
aggregated-from = "https://chromium.googlesource.com/chromiumos/third_party/rust_crates/+/refs/heads/main/cargo-vet/audits.toml?format=TEXT"

[criteria.ub-risk-2]
description = """
Negligible unsoundness or average soundness.

Full description of the audit criteria can be found at
https://github.com/google/rust-crate-audits/blob/main/auditing_standards.md#ub-risk-2
"""
implies = "ub-risk-3"
aggregated-from = "https://chromium.googlesource.com/chromiumos/third_party/rust_crates/+/refs/heads/main/cargo-vet/audits.toml?format=TEXT"

[criteria.ub-risk-2-thorough]
description = """
Negligible unsoundness or average soundness (established in a thorough review).

Full description of the audit criteria can be found at
https://github.com/google/rust-crate-audits/blob/main/auditing_standards.md#ub-risk-2-thorough
"""
implies = "ub-risk-2"
aggregated-from = "https://chromium.googlesource.com/chromiumos/third_party/rust_crates/+/refs/heads/main/cargo-vet/audits.toml?format=TEXT"

[criteria.ub-risk-3]
description = """
Mild unsoundness or suboptimal soundness.

Full description of the audit criteria can be found at
https://github.com/google/rust-crate-audits/blob/main/auditing_standards.md#ub-risk-3
"""
implies = "ub-risk-4"
aggregated-from = "https://chromium.googlesource.com/chromiumos/third_party/rust_crates/+/refs/heads/main/cargo-vet/audits.toml?format=TEXT"

[criteria.ub-risk-4]
description = """
Extreme unsoundness.

Full description of the audit criteria can be found at
https://github.com/google/rust-crate-audits/blob/main/auditing_standards.md#ub-risk-4
"""
aggregated-from = "https://chromium.googlesource.com/chromiumos/third_party/rust_crates/+/refs/heads/main/cargo-vet/audits.toml?format=TEXT"

[[audits.aarch64-paging]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-2"]
version = "0.8.0"

[[audits.aarch64-paging]]
who = "Pranjal Shrivastava <praan@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-2"]
delta = "0.8.0 -> 0.9.1"
notes = """
\"safe-to-deploy\"

The crate introduces no new side effects like network or filesystem access.
Its functionality remains tightly sandboxed to memory management operations.
The risk profile of the crate has not increased.

The unsafe code is contained and justified by the need to interface directly
with hardware-level architecture, a standard practice for these kinds of utilities.
The changes do not introduce any new security vulnerabilities.

\"does-not-implement-crypto\"

Inspection reveals that the crate in question does not attempt to implement any
cryptographic algorithms on its own.

Inspection confirms that no new functionality related to cryptographic algorithms
has been introduced to the crate. The crate's scope remains strictly focused on
low-level AArch64 page table manipulation.

\"ub-risk-2\"

Negligible unsoundness

The crate already contained unsafe code, which is necessary for its core purpose
of interacting with CPU system registers. It therefore cannot be ub-risk-0.

The introduction of unsafe fn activate_raw() is a refactoring, not an addition of
new unsafe behavior. The asm! block it contains is the same necessary unsafe operation
that existed previously which is now improved by making the unsafety explicit for
callers who need more granular control (e.g., for multicore scenarios).

The change to Descriptor::flags() is a safety improvement, as it removes multiple
.unwrap() calls, thus eliminating potential panic points from the codebase.

No new complex or difficult-to-reason-about unsafe logic has been added.
The risk of introducing Undefined Behavior remains negligible and is inherent to the
crate's low-level function.
"""

[[audits.aarch64-paging]]
who = "Imre Kis <imre.kis@arm.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-2"]
delta = "0.9.1 -> 0.10.0"
notes = """
Reverting activate() back to its previous form does not change the unsafe behavior.
activate()/deactivate() changed their behavior to expose the TTBR value instead of storing internally. It does not affect the existing safety requirement.
Adding barriers and using atomic types ensures multicore operation correctness and avoiding race conditions.
"""

[[audits.aarch64-rt]]
who = "Pranjal Shrivastava <praan@google.com>"
criteria = "safe-to-run"
version = "0.2.2"
notes = """
The crate is safe-to-run. Its build.rs script only copies a linker script from the crate's source into the designated OUT_DIR.
It then uses standard cargo:: directives to make Cargo aware of this new file. The script does not access the network, and it's
filesystem access is confined to the expected OUT_DIR, and it does not execute any external or arbitrary shell commands.
"""

[[audits.arm-cci]]
who = "Imre Kis <imre.kis@arm.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-2"]
version = "0.1.0"
notes = """
The crate uses safe-mmio to access the peripheral registers.
The unsafe assembly block only contains barrier instructions that does not violate safety guarantees.
The driver provides functions for entering and exiting cache coherency. This requires further actions from the caller that are described in the safety comments.
"""

[[audits.arm-ffa]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-0"]
version = "0.1.0"

[[audits.arm-ffa]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-0"]
delta = "0.1.0 -> 0.2.1"

[[audits.arm-ffa]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-0"]
delta = "0.2.1 -> 0.3.0"
notes = "There is no unsafe code in the diff, it's mostly fairly straightforward and mechanical parsing logic."

[[audits.arm-ffa]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-2"]
delta = "0.3.0 -> 0.3.1"
notes = "No significant change, only metadata and clippy lints."

[[audits.arm-ffa]]
who = "Imre Kis <imre.kis@arm.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-0"]
delta = "0.3.1 -> 0.4.0"
notes = "Added support for new FF-A interfaces, minor fixes and Covering the crate with unit tests."

[[audits.arm-fvp-base-pac]]
who = "Imre Kis <imre.kis@arm.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-2"]
version = "0.1.3"
notes = """
The crate uses safe-mmio to access the peripheral registers.
The user can obtain multiple Peripherals instances via an unsafe function. In this case the callers responsibility to not use the same peripheral multiple times, as described in the safety requirement.
"""

[[audits.arm-generic-timer]]
who = "Imre Kis <imre.kis@arm.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-2"]
version = "0.1.0"
notes = """
The crate uses safe-mmio to access the peripheral registers.
It provies an unsafe function for generating interrupt, where the required safety conditions are properly described.
"""

[[audits.arm-gic]]
who = "Jeremi Miller <jeremimiller@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-2"]
version = "0.4.0"
notes = """
`arm-gic` is a driver for the arm Generic Interrupt Controller.
`does-not-implement-crypto`: The crate doesn't contain any cryptographic implementations.
`safe-to-deploy`: The crate is a low-level driver that interacts with registers. It doesn't contain complex logic and it won't accept complex inputs.
`ub-risk-2`: The crate contains several unsafe blocks, for MMIO and to call assembly instructions. They are well commented and simple to reason about. While in some cases the caller has to promise safety of the block, this is standard in this kind of crates.
"""

[[audits.arm-gic]]
who = "Pranjal Shrivastava <praan@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-2"]
delta = "0.4.0 -> 0.6.0"
notes = """
safe-to-deploy: The unsafe code is well-encapsulated and used appropriately for its purpose. The changes in this version add support for GICv3
power management and expand the API for handling interrupt groups, but do not fundamentally alter the safety model. The primary safety contract
remains on the caller to provide valid memory-mapped register addresses, which is expected for this kind of crate.

does-not-implement-crypto: A review of the diff confirms that the crate does not contain or implement any cryptographic algorithms. Its functionality is strictly limited to interrupt controller management.

ub-risk-2: The crate's soundness is average and appropriate for its domain. The potential for undefined behavior comes from the caller violating
the documented safety preconditions (e.g., providing an invalid pointer to the constructor or calling from an incorrect CPU exception level), not from logical flaws within the crate itself.
"""

[[audits.arm-gic]]
who = "Imre Kis <imre.kis@arm.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-2"]
delta = "0.6.0 -> 0.6.1"
notes = "Only administrative updates have been made to the repository, including modifications to the README file, license headers, and dependencies. These changes do not affect the crate’s functionality or behavior."

[[audits.arm-gic]]
who = "Imre Kis <imre.kis@arm.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-2"]
delta = "0.6.1 -> 0.7.1"

[[audits.arm-pl011-uart]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-1"]
version = "0.3.1"

[[audits.arm-pl011-uart]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-2"]
delta = "0.3.1 -> 0.3.2"
notes = "No significant change, only metadata and clippy fix."

[[audits.arm-psci]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-0"]
version = "0.1.2"

[[audits.arm-psci]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-2"]
delta = "0.1.2 -> 0.1.3"
notes = "No source change, only metadata."

[[audits.arm-sp805]]
who = "Imre Kis <imre.kis@arm.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-0"]
version = "0.1.1"
notes = "The crate uses safe-mmio to access the peripheral registers. It does not have any unsafe code."

[[audits.autocfg]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = "safe-to-run"
delta = "1.4.0 -> 1.5.0"
notes = "The crate removes some temporary output files, but this looks fine."

[[audits.bitflags]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-0"]
delta = "2.9.0 -> 2.9.1"

[[audits.buddy_system_allocator]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = "safe-to-run"
version = "0.11.0"
notes = "Fairly straightforward code, doesn't access any local or remote resources."

[[audits.cc]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = "does-not-implement-crypto"
version = "1.2.16"

[[audits.linkme]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = "safe-to-run"
version = "0.3.33"
notes = "There's not much logic here, just some types and simple methods. Nothing that affects the local environment."

[[audits.linkme-impl]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = "safe-to-run"
version = "0.3.33"
notes = "Fairly straightforward proc macro, doesn't do anything unexpected."

[[audits.lock_api]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = "safe-to-run"
delta = "0.4.10 -> 0.4.13"
notes = "No access to local resources."

[[audits.log]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-0"]
delta = "0.4.26 -> 0.4.27"

[[audits.num_enum]]
who = "Chris Palmer <palmer@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-2"]
version = "0.7.3"
notes = """
safe-to-deploy: Given the UB risk in `num_enum_derive`, `num_enum` callers
should prefer `FromPrimitive` to `UnsafeFromPrimitive`.
"""

[[audits.num_enum]]
who = "Imre Kis <imre.kis@arm.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-0"]
delta = "0.7.3 -> 0.7.4"
notes = "Dependency version bump, small changes in Cargo.toml."

[[audits.num_enum_derive]]
who = "Chris Palmer <palmer@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-2"]
version = "0.7.3"
notes = """
ub-risk-2: unsafe in asserts, tests, and doc tests. `unchecked_transmute_from`:
unexplained use of `transmute`; caller is required to check that \"`number` must
represent a valid discriminant of `Self`.\"
"""

[[audits.num_enum_derive]]
who = "Imre Kis <imre.kis@arm.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-0"]
delta = "0.7.3 -> 0.7.4"
notes = "Dependency version bump and minor changes in Cargo.toml."

[[audits.paste]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = "safe-to-run"
delta = "1.0.14 -> 1.0.15"
notes = "No substantial changes."

[[audits.percore]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-2"]
version = "0.1.0"

[[audits.rustversion]]
who = "Imre Kis <imre.kis@arm.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-0"]
delta = "1.0.20 -> 1.0.22"
notes = "Dependency update, minor refactoring in build.rs."

[[audits.safe-mmio]]
who = "Chris Palmer <palmer@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-2-thorough"]
version = "0.1.0"
notes = """
No crypto.

Safe to run: No filesystem access, process creation, et c.

Safe to deploy: Does not interact with untrustworthy data.

UB: Small amount of `unsafe`, with well-documented safety requirements for
callers. This crate probably can't be ub-risk-1 because it can't statically or
feasibly dynamically check its callers; therefore callers are on their own to
meet the (clear, straightforward) safety contract.
"""

[[audits.safe-mmio]]
who = "Pranjal Shrivastava <praan@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-2"]
delta = "0.1.0 -> 0.2.5"
notes = """
\"safe-to-deploy\"

The crate has no functionality related to filesystems, networking, or other ambient capabilities.
Its scope is strictly limited to MMIO.

The changes introduced between versions 0.1.0 and 0.2.5 are focused on enhancing the safety,
correctness, and ergonomics of the API. By providing a stronger type system for MMIO fields and
addressing a platform-specific compiler bug, these changes make the crate more safe to deploy, not less.

An attacker cannot manipulate the runtime behavior of the unsafe sections. The inline assembly is fixed,
and the pointers are controlled by the user of the crate, who is already operating in a privileged context
where they can provide raw memory addresses. The crate provides the tools to do this more safely.

\"does-not-implement-crypto\"

The purpose of the crate is to provide safe, low-level access to Memory-Mapped I/O (MMIO).
A review of all changes confirms that no cryptographic algorithms have been added. The crate's
functionality is strictly limited to hardware register access patterns.

\"ub-risk-2\"

Negligible unsoundness

The crate inherently requires unsafe code to perform its function of interacting with raw memory addresses.
Therefore, it cannot be ub-risk-0.

The most significant new unsafe code is the inline assembly in aarch64_mmio.rs. This change is not arbitrary;
it is a specific, targeted workaround for a documented compiler issue on AArch64.

The introduction of the ReadOnly, WriteOnly, ReadPure, etc., wrapper types is a significant safety improvement.
It moves the verification of access permissions from runtime to compile-time, reducing the surface area for
programmer error.

The unsafe blocks are well-justified by the low-level nature of the crate. The API is designed to build safe
abstractions on top of these necessary unsafe primitives. The risk of UB remains negligible and is not increased
by this delta.
"""

[[audits.scopeguard]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = "safe-to-run"
delta = "1.1.0 -> 1.2.0"
notes = "No access to local resources, and no major changes since last version."

[[audits.shlex]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = ["does-not-implement-crypto", "ub-risk-2"]
version = "1.3.0"

[[audits.smccc]]
who = "Pranjal Shrivastava <praan@google.com>"
criteria = "safe-to-run"
version = "0.2.2"
notes = "safe-to-run: The crate is safe to run. It contains no code that accesses the filesystem, network, or other ambient capabilities during the build process."

[[audits.spin]]
who = "Chris Palmer <palmer@google.com>"
criteria = ["safe-to-deploy", "ub-risk-2"]
version = "0.9.8"
notes = """
Safe to deploy: Does not interact with untrustworthy input.

UB risk: A fair amount of `unsafe`, but it is all either well explained with
SAFETY comments that rely on e.g. statically checked assertions such as
exclusive access due to `&mut` (proven by `rustc`), exclusive access due to
access inside `*Guard`s, and `debug_assert`s that check the safety
preconditions. Other uses of `unsafe` are in tests, such as to mutate a `static
mut`.
"""

[[audits.spin]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-2"]
delta = "0.9.8 -> 0.10.0"

[[audits.syn]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = ["safe-to-deploy", "ub-risk-2"]
version = "2.0.87"
notes = "Extensive unsafe code in buffer.rs is probably fine, but not very well documented. Unsafe APIs aren't exposed at least."

[[audits.thiserror]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-0"]
version = "2.0.3"

[[audits.thiserror]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-0"]
delta = "2.0.3 -> 2.0.12"

[[audits.thiserror]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-0"]
delta = "2.0.12 -> 2.0.14"
notes = "No significant changes, only metadata and comments."

[[audits.thiserror]]
who = "Imre Kis <imre.kis@arm.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-0"]
delta = "2.0.14 -> 2.0.16"
notes = "Bump self and dependency versions. Added option to build.rs for suppressing lint warning when building dependencies."

[[audits.thiserror-impl]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-0"]
version = "2.0.3"

[[audits.thiserror-impl]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-0"]
delta = "2.0.3 -> 2.0.12"

[[audits.thiserror-impl]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-0"]
delta = "2.0.12 -> 2.0.14"
notes = "No significant changes, only metadata and a lint attribute."

[[audits.thiserror-impl]]
who = "Imre Kis <imre.kis@arm.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-0"]
delta = "2.0.14 -> 2.0.16"
notes = "Dependency version bump only."

[[audits.uuid]]
who = "Chris Palmer <palmer@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-2"]
version = "1.15.1"
notes = """
does-not-implement-crypto: Calls into `sha1_smol` to use it in a straightforward
and correct way. Uses `md5` similarly. (Although cryptographically obsolete,
particular UUID specification versions require these functions.) Uses
`getrandom` (default) or `rand` (configurable) for its RNG.

ub-risk-2: `unsafe` blocks are either well-explained with safety comments;
invocations of C functions with valid arguments (e.g. `CoCreateGuid` on
Windows), and casts from and to pointers to objects that are all newtype
wrappers of the same underlying type and hence have the same layout.
`new_unchecked` returns a `NonNilUuid` without checking it, creating the
(declared) possibility of UB.

safe-to-deploy: Limited input language. `parse_str` and callees do not use
`unsafe`. UB seems restricted to caller error (as mentioned above for
ub-risk-2).
"""

[[audits.uuid]]
who = "Jamie Fox <jamiefox@google.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-2"]
delta = "1.15.1 -> 1.18.0"
notes = "Minor changes only, no new unsafe code or crypto."

[[audits.uuid]]
who = "Imre Kis <imre.kis@arm.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-2"]
delta = "1.18.0 -> 1.18.1"
notes = "Changed unsafe transmute calls to zerocopy if the relevant feature is enabled."

[[audits.zerocopy]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = "does-not-implement-crypto"
delta = "0.8.14 -> 0.8.26"

[[audits.zerocopy]]
who = "Imre Kis <imre.kis@arm.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-2"]
delta = "0.8.26 -> 0.8.27"

[[audits.zerocopy-derive]]
who = "Andrew Walbran <qwandor@google.com>"
criteria = "does-not-implement-crypto"
delta = "0.8.14 -> 0.8.26"

[[audits.zerocopy-derive]]
who = "Imre Kis <imre.kis@arm.com>"
criteria = ["safe-to-deploy", "does-not-implement-crypto", "ub-risk-2"]
delta = "0.8.26 -> 0.8.27"
notes = "Added support and tests for 128 bit types."
