// Copyright The Rusted Firmware-A Contributors.
//
// SPDX-License-Identifier: BSD-3-Clause

//! Arm Embedded Trace Extension(ETE) is a per CPU trace component that allows tracing the CPU
//! execution. It overlaps with the CoreSight ETMv4 architecture and has extended support for
//! future architecture changes. The trace generated by the ETE could be stored via legacy
//! CoreSight components (e.g, TMC-ETR) or other means (e.g, using a per CPU buffer Arm Trace
//! Buffer Extension (TRBE)).

use super::CpuExtension;

use crate::context::{PerWorldContext, World};

use arm_sysregs::{CptrEl3, read_id_aa64dfr0_el1};

pub struct SysRegTrace;

impl CpuExtension for SysRegTrace {
    fn is_present(&self) -> bool {
        read_id_aa64dfr0_el1().is_feat_sys_reg_trace_present()
    }

    fn configure_per_world(&self, world: World, ctx: &mut PerWorldContext) {
        match world {
            World::NonSecure => {
                // NS can access this.
                ctx.cptr_el3 -= CptrEl3::TTA;
            }
            World::Secure => {
                // Secure world should not access this.
                ctx.cptr_el3 |= CptrEl3::TTA;
            }
            #[cfg(feature = "rme")]
            World::Realm => {
                // Realm world should not access this.
                ctx.cptr_el3 |= CptrEl3::TTA;
            }
        }
    }
}
